I have two 'banks' of snippets formatted in JSON. Each snippet is for a specific offer. The name of the offer (labeled name) is also the name of the snippet. Each 'Header' snippet has a corresponding 'Second' snippet (meaning they represent the same offer).

Please take note of the following python script:


import random
import datetime
import os
import PyRSS2Gen
import difflib
import json

# Primary and secondary items

primary_items = [
    #Weighted Items
    
    #-------------
    {"header": "EdAd - CTO - Header - CFE Funding New Copy J Rewrite V4 Jan", "id": "5375"},
    #{"header": "EdAd - CTO - CFE Funding New Copy J Rewrite V4 Jan", "id": "5375"},
    #CLM Media	CTO: MMT - 5 Under the Radar Stocks Jan LM5394
    #{"header": "EdAd - CTO - Darwin IND Post Election Stocks January", "id": "5376"},
    #Darwin	Summa 7 Stocks January 5378
    {"header": "EdAd - CTO - Header - Darwin TWI 2 Best AI Stocks January", "id": "5380"},
    #{"header": "EdAd - CTO - Darwin TWI 2 Best AI Stocks January", "id": "5380"},
    #Darwin	WCI 7 Stock to 10x January 5382
    #Darwin	WCI Options January 5384
    #Darwin	WCI Buy and Hold January 5386
    #Darwin	WIN Crypto January 5388
    {"header": "EdAd - CTO - Header - Darwin WIN Options January", "id": "5390"},
    #{"header": "EdAd - CTO - Darwin WIN Options January", "id": "5390"},
    #5396	InvestPub	GL - The Hotsheets 4 January 5396
    #5397	InvestPub	GL - The Hotsheets 9 January 5397
    #5398	InvestPub	GL - The Hotsheets 10 January 5398
    #5399	InvestPub	NT - FIVE Dividend Cheat Sheets 3 January 5399
    #5400	InvestPub	NT - FIVE Dividend Cheat Sheets 4 January 5400
    #5401	InvestPub	NT - FIVE Dividend Cheat Sheets 8 January 5401
    {"header": "EdAd - CTO - Header - InvestPub CP Daily Profit 2 January", "id": "5402"},
    #{"header": "EdAd - CTO - InvestPub CP Daily Profit 2 January", "id": "5402"},
    #5403	InvestPub	CP - Daily Profit 6 January 5403
    #5404	InvestPub	CP - Daily Profit 7 January 5404
    #5405	Meza Services	CTO Nasdaq New Link Jan
    #FILLED{"header": "EdAd - CTO - MillPub CTO DIT Lift 3 Dec", "id": "5351"},
    #FILLED{"header": "EdAd - CTO - Header - Roaring Monkey Making Easy Trades", "id": "5356"},
    #FILLED{"header": "EdAd - CTO - Roaring Monkey CTO Making Easy Trades", "id": "5356"},
    #{"header": "EdAd - CTO - Roaring Monkey Making Easy Trades rewrite", "id": "5393"},
    {"header": "EdAd - CTO - Header - Roaring Monkey Making Easy Trades rewrite", "id": "5393"},
    #{"header": "EdAd - CTO - Trading Tips 5 Stocks to Double Jan", "id": "5392"},
    {"header": "EdAd - CTO - Header - Trading Tips 5 Stocks to Double Jan", "id": "5392"},
    #{"header": "EdAd - CTO - Wyatt SpaceX V2 Jan", "id": "5408"},
    {"header": "EdAd - CTO - Header - Wyatt SpaceX V2 Jan", "id": "5408"},
    #EdAd - CTO - Wyatt SpaceX V2 Jan
    #EdAd - CTO - Header - Wyatt SpaceX V2 Jan
    #5407	Wyatt	CTO: SpaceX V5 Jan
    #4699	Beachside Media	CPC: Hartford - Death of the Dollar Jan
    #5068	Beachside Media	CPC: Hartford - Chilling Warning Jan
    #5227	Beachside Media	CPC: Hartford - President Trump SL 1 - Jan
    #{"header": "EdAd - CPC - Mode Mobile JR Rewrite Investor Focused", "id": "5064"},
    #T3 Live	CPC Power Play 1 Dec 5149
    #{"header": "EdAd-CPC-T3 Live Blackbookv2revised_NEWLINK", "id": "5153"},

]

secondary_items = [
    #{"header": "EdAd - CTO - Header - CFE Funding New Copy J Rewrite V4 Jan", "id": "5375"},
    {"header": "EdAd - CTO - CFE Funding New Copy J Rewrite V4 Jan", "id": "5375"},
    #CLM Media	CTO: MMT - 5 Under the Radar Stocks Jan LM5394
    {"header": "EdAd - CTO - Darwin IND Post Election Stocks January", "id": "5376"},
    #Darwin	Summa 7 Stocks January 5378
    #{"header": "EdAd - CTO - Header - Darwin TWI 2 Best AI Stocks January", "id": "5380"},
    {"header": "EdAd - CTO - Darwin TWI 2 Best AI Stocks January", "id": "5380"},
    #Darwin	WCI 7 Stock to 10 January 5382
    #Darwin	WCI Options January 5384
    #Darwin	WCI Buy an Hold January 5386
    #Darwin	WIN Crypto January 5388
    #{"header": "EdAd - CTO - Header - Darwin WIN Options January", "id": "5390"},
    {"header": "EdAd - CTO - Darwin WIN Options January", "id": "5390"},
    #5396	InvestPub	GL - The Hotsheets 4 January 5396
    #5397	InvestPub	GL - The Hotsheets 9 January 5397
    #5398	InvestPub	GL - The Hotsheets 10 January 5398
    #5399	InvestPub	NT - FIVE Dividend Cheat Sheets 3 January 5399
    #5400	InvestPub	NT - FIVE Dividend Cheat Sheets 4 January 5400
    #5401	InvestPub	NT - FIVE Dividend Cheat Sheets 8 January 5401
    {"header": "EdAd - CTO - InvestPub CP Daily Profit 2 January", "id": "5402"},
    #5403	InvestPub	CP - Daily Profit 6 January 5403
    #5404	InvestPub	CP - Daily Profit 7 January 5404
    #FILLED{"header": "EdAd - CTO - MillPub CTO DIT Lift 3 Dec", "id": "5351"},
    #FILLED{"header": "EdAd - CTO - Header - Roaring Monkey Making Easy Trades", "id": "5356"},
    #FILLED{"header": "EdAd - CTO - Roaring Monkey CTO Making Easy Trades", "id": "5356"},
    {"header": "EdAd - CTO - Roaring Monkey Making Easy Trades rewrite", "id": "5393"},
    #{"header": "EdAd - CTO - Header - Roaring Monkey Making Easy Trades rewrite", "id": "5393"},
    {"header": "EdAd - CTO - Trading Tips 5 Stocks to Double Jan", "id": "5392"},
    {"header": "EdAd - CTO - Wyatt SpaceX V2 Jan", "id": "5408"},
    #{"header": "EdAd - CTO - Header - Wyatt SpaceX V2 Jan", "id": "5408"},
    #{"header": "EdAd - CTO - Header - Trading Tips 5 Stocks to Double Jan", "id": "5392"},
    {"header": "EdAd - CPC - Mode Mobile JR Rewrite Investor Focused", "id": "5064"},
    #Oxford	TPU Ounce CPC 5154
    #T3 Live	CPC Power Play 1 Dec 5149
    {"header": "EdAd-CPC-T3 Live Blackbookv2revised_NEWLINK", "id": "5153"},
]

def similar(a, b):
    return difflib.SequenceMatcher(None, a, b).ratio()

# Select one primary item
selected_primary = random.choice(primary_items)

# Filter secondary items to exclude the selected primary and ensure unique headers
filtered_secondaries = [item for item in secondary_items if item['header'] != selected_primary['header']]

# Ensure we have enough secondary items for selection
if len(filtered_secondaries) < 2:
    raise Exception("Not enough unique secondary items to select from.")

# Select two unique secondary items randomly from the filtered list with similarity check
unique_headers = set()
unique_secondaries = []

while len(unique_secondaries) < 2:
    candidate = random.choice(filtered_secondaries)
    if candidate['header'] not in unique_headers:
        is_similar_to_primary = similar(candidate['header'], selected_primary['header']) > 0.70
        is_similar_to_others = any(similar(candidate['header'], header) > 0.70 for header in unique_headers)
        if not is_similar_to_primary and not is_similar_to_others:
            unique_secondaries.append(candidate)
            unique_headers.add(candidate['header'])

# Current datetime
now = datetime.datetime.now()

# Custom RSSItem class
class CustomRSSItem(PyRSS2Gen.RSSItem):
    def __init__(self, headers_ids=None, *args, **kwargs):
        super(CustomRSSItem, self).__init__(*args, **kwargs)
        self.headers_ids = headers_ids if headers_ids is not None else []

    def publish_extensions(self, handler):
        suffixes = ['i', 'ii', 'iii']  # three snippets (one primary, two secondary)
        for index, (header, id) in enumerate(self.headers_ids):
            if index < len(suffixes):
                suffix = suffixes[index]
                handler.startElement(f"LMheaderPM{suffix}", {})
                handler.characters(header)
                handler.endElement(f"LMheaderPM{suffix}")
                handler.startElement(f"LMhIDpm{suffix}", {})
                handler.characters(id)
                handler.endElement(f"LMhIDpm{suffix}")

# Prepare headers_ids for RSS
headers_ids = [(selected_primary['header'], selected_primary['id'] + " 7")] + \
              [(item['header'], item['id'] + " 2") for item in unique_secondaries]

# Create the RSS feed
rss_feed = PyRSS2Gen.RSS2(
    title="Unique Snippet Feed",
    link="http://example.com/unique_snippets.xml",
    description="This feed displays a unique selection of snippets with their IDs.",
    lastBuildDate=now,
    items=[
        CustomRSSItem(title="Unused", description="Dummy item, ignore"),  # Dummy item
        CustomRSSItem(headers_ids=headers_ids, title="Active Content", description="Real item with content")  # Actual content item
    ]
)

# Output directory and filenames
output_dir = "/Users/enrique/SA Folder/SNIPPET RSS/THIS IS THE FOLDER IGNORE ALL THE OTHERS/snippets/"
os.makedirs(output_dir, exist_ok=True)

# XML write
rss_file_path = os.path.join(output_dir, "LMsnippetsALL.xml")
with open(rss_file_path, "w") as file:
    rss_feed.write_xml(file)

# JSON write: structure the JSON to closely match how items appear in the XML
# We'll create a list of items that appear in the feed in the same order: primary first, then secondaries.
json_items = [
    {"header": selected_primary['header'], "id": selected_primary['id'] + " 7"}
]
for sec in unique_secondaries:
    json_items.append({"header": sec['header'], "id": sec['id'] + " 2"})

json_data = {
    "items": json_items,
    "run_datetime": now.strftime('%Y-%m-%d %H:%M:%S')
}

json_file_path = os.path.join(output_dir, "LMsnippetsALL.json")
with open(json_file_path, "w") as json_file:
    json.dump(json_data, json_file, indent=4)

# Receipt
receipt_file_path = os.path.join(output_dir, "LMSnippetsReceipt.txt")
with open(receipt_file_path, "a") as file:
    file.write(f"Run on: {now.strftime('%Y-%m-%d %H:%M:%S')}\n")
    file.write("Selected snippets and IDs:\n")
    file.write(f"{selected_primary['header']}: {selected_primary['id']} 7\n")
    for item in unique_secondaries:
        file.write(f"{item['header']}: {item['id']} 2\n")
    file.write("\n")  # Add an extra newline for better separation between entries

print("Unique RSS feed, JSON file, and receipt have been generated.")

The new JSON bank of snippets i have given you, needs to follow a similar output structure to this one. The random logic, The non repeating logic and so on need to be respected. (again, the above python is a general example of the idea we are trying to implement with the new JSON bank of snippets)

The JSON bank of snippets will output one header, and two second snippets (just like above), however the output will be different in the following ways:

The output will be in JSON format, showing the JSON HTML

The snippets should be labeled on the JSON output as 
one:
two:
three: 
(to represent the snippet placement)

The main output directory is designated in the document, but should be: "/Users/enrique/SA Folder/SNIPPET RSS/THIS IS THE FOLDER IGNORE ALL THE OTHERS/snippets/JSONsnippets/".

The 'NL bank' in our outline has a list of three.
MASTER, S7, and SH.

The NL bank will eventually get bigger.

Each item in the NL bank will be it's own output file (going to the output directory specified earlier). With the list we currently have, the output files should be named 'Master', 'S7', and 'SH' for a total of 3 output files. if another item is added to the list, there should be another output file corresponding to that item.

The following logic should happen in transition from the JSON bank, to the output directory.

Each JSON snippet has 'ENTERLINKHERE'. This is a variable we are going to be replacing with the following link:

https://ctrack.clktks.com/leadintake?id=LM'ID'&hash={{md5 email}}&siteId='PL''seriesIDs'&nlp='PL''seriesIDs'

the 'ID' in the LM'ID' section of the link should be replaced by the four digit LMID number that corresponds with each snippet.

(The Master source/output will not adhere to the Link rules that follow, instead, it will replace 'ENTERLINKHERE' with 'https://ctrack.clktks.com/leadintake?id=LM'ID'&hash={{md5 email}}'
and add nothing additional to this link, except for the LM'ID' rule that was stated earlier.)

This link https://ctrack.clktks.com/leadintake?id=LM'ID'&hash={{md5 email}}&siteId='PL''seriesIDs'&nlp='PL''seriesIDs' also contains variables we will be replacing with the following information:

'PL' will be replaced with the corresponding number from each 'bank'. a Header snippet will replace 'PL' with 7 a Second snippet will replace a PL with 2 

'seriesIDs' will be replaced with the number from the NL bank. Each output will have it's own seriesID. The output file for S7 will have 18. The output file for SH will have 09. (This should be honored for each item that gets added to the list in the future).

The whole JSON script for each snippet should be in the output. so three JSON HTML files by the one, two, three items in the output file.

I will need at least two python scripts (more at your discretion if needed). One that contains the bank (essentially all the information in the 'outline' file). Make it user friendly and easy to read so i can edit/add snippets as necessary, as well as add items to the NL list as necessary as well. The second python script should be the logic, the one i will be running that pulls the information from the bank, and then converts it to the output files. The two python scripts will be living in "/Users/enrique/SA Folder/" if you need to reference it. The one file should be called JSONsnippetBank, and the other JSONsnippetLogic.


